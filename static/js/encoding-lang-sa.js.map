{"version":3,"sources":["webpack:///encoding-lang-sa.js","webpack:///webpack/bootstrap 7d6ceebaa5faa154ac80","webpack:///./index.js","webpack:///./~/multichar-transcription/index.js"],"names":["EncodingLangSa","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","MT","options","converter","from","to","option","encs","Error","Object","keys","join","funcs","addToNode","src","res","replace","removeSpace","sorter","conv","a","b","deva","ā","i","ī","u","ū","ṛ","ṝ","ḷ","ḹ","e","ai","o","au","ṃ","ḥ","k","kh","g","gh","ṅ","ch","j","jh","ñ","ṭ","ṭh","ḍ","ḍh","ṇ","t","th","d","dh","n","ph","bh","y","r","l","v","ś","ṣ","s","h","^a","^ā","^i","^ī","^u","^ū","^ṛ","^ṝ","^ḷ","^ḹ","^e","^ai","^o","^au","_","'","''","/","//","iast","kami","_sorter","dump","_nodes","fromChars","toChars","Node","forEach","key","toChar","Array","fromChar","addEntry","convert","node","start","dest","length","searchNode","push","getReplaceString","getDepth","_childNodes","replaceString","_replaceString","childNodes","reduce","prev","depth","_depth","this","terminal"],"mappings":"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","file":"encoding-lang-sa.js","sourcesContent":["var EncodingLangSa =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// encoding-lang-sa.js\n\t\n\tvar MT = __webpack_require__(1)\n\t\n\tmodule.exports = (function(options) {\n\t  var funcs = {}\n\t    , encs = {\n\t        'deva': {\n\t          'a': '\\u0900',\n\t          'ā': '\\u093E',\n\t          'i': '\\u093F',\n\t          'ī': '\\u0940',\n\t          'u': '\\u0941',\n\t          'ū': '\\u0942',\n\t          'ṛ': '\\u0943',\n\t          'ṝ': '\\u0944',\n\t          'ḷ': '\\u0962',\n\t          'ḹ': '\\u0963',\n\t          'e': '\\u0947',\n\t          'ai': '\\u0948',\n\t          'o': '\\u094B',\n\t          'au': '\\u094C',\n\t          'ṃ':  '\\u0902',\n\t          'ḥ': '\\u0903',\n\t          'k': 'क्',\n\t          'kh': 'ख्',\n\t          'g': 'ग्',\n\t          'gh': 'घ्',\n\t          'ṅ': 'ङ्',\n\t          'c': 'च्',\n\t          'ch': 'छ्',\n\t          'j': 'ज्',\n\t          'jh': 'झ्',\n\t          'ñ': 'ञ्',\n\t          'ṭ': 'ट्',\n\t          'ṭh': 'ठ्',\n\t          'ḍ': 'ड्',\n\t          'ḍh': 'ढ्',\n\t          'ṇ': 'ण्',\n\t          't': 'त्',\n\t          'th': 'थ्',\n\t          'd': 'द्',\n\t          'dh': 'ध्',\n\t          'n': 'न्',\n\t          'p': 'प्',\n\t          'ph': 'फ्',\n\t          'b': 'ब्',\n\t          'bh': 'भ्',\n\t          'm': 'म्',\n\t          'y': 'य्',\n\t          'r': 'र्',\n\t          'l': 'ल्',\n\t          'v': 'व्',\n\t          'ś': 'श्',\n\t          'ṣ': 'ष्',\n\t          's': 'स्',\n\t          'h': 'ह्',\n\t          '^a': 'अ',\n\t          '^ā': 'आ',\n\t          '^i': 'इ',\n\t          '^ī': 'ई',\n\t          '^u': 'उ',\n\t          '^ū': 'ऊ',\n\t          '^ṛ': 'ऋ',\n\t          '^ṝ': 'ॠ',\n\t          '^ḷ': 'ऌ',\n\t          '^ḹ': 'ॡ',\n\t          '^e': 'ए',\n\t          '^ai': 'ऐ',\n\t          '^o': 'ओ',\n\t          '^au': 'औ',\n\t          '_': '\\u094D',\n\t          \"'\": 'ऽ',\n\t          \"''\": \"'\",\n\t          '/': ' ।',\n\t          '//': ' ॥'\n\t        }\n\t      , 'iast': {\n\t          'a': 'a',\n\t          'ā': 'ā',\n\t          'i': 'i',\n\t          'ī': 'ī',\n\t          'u': 'u',\n\t          'ū': 'ū',\n\t          'ṛ': 'ṛ',\n\t          'ṝ': 'ṝ',\n\t          'ḷ': 'ḷ',\n\t          'ḹ': 'ḹ',\n\t          'e': 'e',\n\t          'ai': 'ai',\n\t          'o': 'o',\n\t          'au': 'au',\n\t          'ṃ': 'ṃ',\n\t          'ḥ': 'ḥ',\n\t          'k': 'k',\n\t          'kh': 'kh',\n\t          'g': 'g',\n\t          'gh': 'gh',\n\t          'ṅ': 'ṅ',\n\t          'c': 'c',\n\t          'ch': 'ch',\n\t          'j': 'j',\n\t          'jh': 'jh',\n\t          'ñ': 'ñ',\n\t          'ṭ': 'ṭ',\n\t          'ṭh': 'ṭh',\n\t          'ḍ': 'ḍ',\n\t          'ḍh': 'ḍh',\n\t          'ṇ': 'ṇ',\n\t          't': 't',\n\t          'th': 'th',\n\t          'd': 'd',\n\t          'dh': 'dh',\n\t          'n': 'n',\n\t          'p': 'p',\n\t          'ph': 'ph',\n\t          'b': 'b',\n\t          'bh': 'bh',\n\t          'm': 'm',\n\t          'y': 'y',\n\t          'r': 'r',\n\t          'l': 'l',\n\t          'v': 'v',\n\t          'ś': 'ś',\n\t          'ṣ': 'ṣ',\n\t          's': 's',\n\t          'h': 'h',\n\t          '^a': '^a',\n\t          '^ā': '^ā',\n\t          '^i': '^i',\n\t          '^ī': '^ī',\n\t          '^u': '^u',\n\t          '^ū': '^ū',\n\t          '^ṛ': '^ṛ',\n\t          '^ṝ': '^ṝ',\n\t          '^ḷ': '^ḷ',\n\t          '^ḹ': '^ḹ',\n\t          '^e': '^e',\n\t          '^ai': '^ai',\n\t          '^o': '^o',\n\t          '^au': '^au',\n\t          '_': '_',\n\t          \"'\": \"'\",\n\t          \"''\": \"''\",\n\t          '/': '/',\n\t          '//': '//'\n\t        }\n\t      , 'kami': {\n\t          'a': 'a',\n\t          'ā': 'aa',\n\t          'i': 'i',\n\t          'ī': 'ii',\n\t          'u': 'u',\n\t          'ū': 'uu',\n\t          'ṛ': '.r',\n\t          'ṝ': ':r',\n\t          'ḷ': '.l',\n\t          'ḹ': ':l',\n\t          'e': 'e',\n\t          'ai': 'ai',\n\t          'o': 'o',\n\t          'au': 'au',\n\t          'ṃ': '.m',\n\t          'ḥ': '.h',\n\t          'k': 'k',\n\t          'kh': 'kh',\n\t          'g': 'g',\n\t          'gh': 'gh',\n\t          'ṅ': '.g',\n\t          'c': 'c',\n\t          'ch': 'ch',\n\t          'j': 'j',\n\t          'jh': 'jh',\n\t          'ñ': '.j',\n\t          'ṭ': '.t',\n\t          'ṭh': '.th',\n\t          'ḍ': '.d',\n\t          'ḍh': '.dh',\n\t          'ṇ': '.n',\n\t          't': 't',\n\t          'th': 'th',\n\t          'd': 'd',\n\t          'dh': 'dh',\n\t          'n': 'n',\n\t          'p': 'p',\n\t          'ph': 'ph',\n\t          'b': 'b',\n\t          'bh': 'bh',\n\t          'm': 'm',\n\t          'y': 'y',\n\t          'r': 'r',\n\t          'l': 'l',\n\t          'v': 'v',\n\t          'ś': '.c',\n\t          'ṣ': '.s',\n\t          's': 's',\n\t          'h': 'h',\n\t          '^a': '^a',\n\t          '^ā': '^aa',\n\t          '^i': '^i',\n\t          '^ī': '^ii',\n\t          '^u': '^u',\n\t          '^ū': '^uu',\n\t          '^ṛ': '^.r',\n\t          '^ṝ': ['^:r', '^.r.r'],\n\t          '^ḷ': '^.l',\n\t          '^ḹ': ['^:l', '^.l.l'],\n\t          '^e': '^e',\n\t          '^ai': '^ai',\n\t          '^o': '^o',\n\t          '^au': '^au',\n\t          '_': '_',\n\t          \"'\": \"'\",\n\t          \"''\": \"''\",\n\t          '/': '/',\n\t          '//': '//'\n\t        }\n\t      , 'kh': {\n\t          'a': 'a',\n\t          'ā': 'A',\n\t          'i': 'i',\n\t          'ī': 'I',\n\t          'u': 'u',\n\t          'ū': 'U',\n\t          'ṛ': 'R',\n\t          'ṝ': ['RR', 'Q'],\n\t          'ḷ': 'L',\n\t          'ḹ': 'LL',\n\t          'e': 'e',\n\t          'ai': 'ai',\n\t          'o': 'o',\n\t          'au': 'au',\n\t          'ṃ': 'M',\n\t          'ḥ': 'H',\n\t          'k': 'k',\n\t          'kh': 'kh',\n\t          'g': 'g',\n\t          'gh': 'gh',\n\t          'ṅ': 'G',\n\t          'c': 'c',\n\t          'ch': 'ch',\n\t          'j': 'j',\n\t          'jh': 'jh',\n\t          'ñ': 'J',\n\t          'ṭ': 'T',\n\t          'ṭh': 'Th',\n\t          'ḍ': 'D',\n\t          'ḍh': 'Dh',\n\t          'ṇ': 'N',\n\t          't': 't',\n\t          'th': 'th',\n\t          'd': 'd',\n\t          'dh': 'dh',\n\t          'n': 'n',\n\t          'p': 'p',\n\t          'ph': 'ph',\n\t          'b': 'b',\n\t          'bh': 'bh',\n\t          'm': 'm',\n\t          'y': 'y',\n\t          'r': 'r',\n\t          'l': 'l',\n\t          'v': 'v',\n\t          'ś': ['z', 'Z'],\n\t          'ṣ': 'S',\n\t          's': 's',\n\t          'h': 'h',\n\t          '^a': '^a',\n\t          '^ā': '^A',\n\t          '^i': '^i',\n\t          '^ī': '^I',\n\t          '^u': '^u',\n\t          '^ū': '^U',\n\t          '^ṛ': '^R',\n\t          '^ṝ': ['^RR', '^Q'],\n\t          '^ḷ': '^L',\n\t          '^ḹ': '^LL',\n\t          '^e': '^e',\n\t          '^ai': '^ai',\n\t          '^o': '^o',\n\t          '^au': '^au',\n\t          '_': '_',\n\t          \"'\": \"'\",\n\t          \"''\": \"''\",\n\t          '/': '/',\n\t          '//': '//'\n\t        }\n\t      , '_sorter': {\n\t          'a': '\\u0901',\n\t          'ā': '\\u0903',\n\t          'i': '\\u0905',\n\t          'ī': '\\u0907',\n\t          'u': '\\u0909',\n\t          'ū': '\\u090B',\n\t          'ṛ': '\\u090D',\n\t          'ṝ': '\\u090F',\n\t          'ḷ': '\\u0911',\n\t          'ḹ': '\\u0913',\n\t          'e': '\\u0915',\n\t          'ai': '\\u0917',\n\t          'o': '\\u0919',\n\t          'au': '\\u091B',\n\t          'ṃ':  '\\u091D',\n\t          'ḥ': '\\u091E',\n\t          'k': '\\u0920',\n\t          'kh': '\\u0921',\n\t          'g': '\\u0922',\n\t          'gh': '\\u0923',\n\t          'ṅ': '\\u0924',\n\t          'c': '\\u0925',\n\t          'ch': '\\u0926',\n\t          'j': '\\u0927',\n\t          'jh': '\\u0928',\n\t          'ñ': '\\u0929',\n\t          'ṭ': '\\u092A',\n\t          'ṭh': '\\u092B',\n\t          'ḍ': '\\u092C',\n\t          'ḍh': '\\u092D',\n\t          'ṇ': '\\u092E',\n\t          't': '\\u092F',\n\t          'th': '\\u0930',\n\t          'd': '\\u0931',\n\t          'dh': '\\u0932',\n\t          'n': '\\u0933',\n\t          'p': '\\u0934',\n\t          'ph': '\\u0935',\n\t          'b': '\\u0936',\n\t          'bh': '\\u0937',\n\t          'm': '\\u0938',\n\t          'y': '\\u0939',\n\t          'r': '\\u093A',\n\t          'l': '\\u093B',\n\t          'v': '\\u093C',\n\t          'ś': '\\u093D',\n\t          'ṣ': '\\u093E',\n\t          's': '\\u093F',\n\t          'h': '\\u0940',\n\t          '^a': '\\u0902',\n\t          '^ā': '\\u0904',\n\t          '^i': '\\u0906',\n\t          '^ī': '\\u0908',\n\t          '^u': '\\u090A',\n\t          '^ū': '\\u090C',\n\t          '^ṛ': '\\u090E',\n\t          '^ṝ': '\\u0910',\n\t          '^ḷ': '\\u0912',\n\t          '^ḹ': '\\u0914',\n\t          '^e': '\\u0916',\n\t          '^ai': '\\u0918',\n\t          '^o': '\\u091A',\n\t          '^au': '\\u091C',\n\t          '_': '\\u0900'\n\t        }\n\t      }\n\t\n\t  function converter(from, to, option) {\n\t    if (!encs[from] || !encs[to]) {\n\t      throw new Error('EncodingLangSa: supported encodings is: '\n\t        + Object.keys(encs).join(', '))\n\t    }\n\t    if (!funcs[from + '-' + to]) {\n\t      funcs[from + '-' + to] = MT.addToNode(from, to, encs[from], encs[to])\n\t    }\n\t    return function(src) {\n\t      var res = src\n\t      if (from === 'deva') {\n\t        res = res.replace(/([\\u0915-\\u0939])/g, '$1\\u094D\\u0900')\n\t        .replace(/\\u0900([\\u094D\\u093E-\\u094C\\u0962\\u0963])/g, '$1')\n\t      }\n\t      res = funcs[from + '-' + to](res)\n\t      if (from === 'deva') {\n\t        res = res.replace(/_/g, '')\n\t      }\n\t      if (to === 'deva') {\n\t        if (option && option.removeSpace) {\n\t          res = res.replace(/\\u094D /g, '\\u094D')\n\t        }\n\t        res = res\n\t        .replace(/\\u094D\\u0900/g, '')\n\t        .replace(/\\u094D([\\u093E-\\u094C\\u0962\\u0963])/g, '$1')\n\t        .replace(/\\u0900/g, '')\n\t      }\n\t      return res\n\t    }\n\t  }\n\t\n\t  function sorter(from, option) {\n\t    var conv = converter(from, '_sorter', option)\n\t    return function(a, b) {\n\t      a = conv(a)\n\t      b = conv(b)\n\t      return a < b ? -1 : a > b ? 1 : 0\n\t    }\n\t  }\n\t\n\t  // export\n\t  return {\n\t    converter: converter\n\t  , sorter: sorter\n\t  }\n\t})()\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// multichar-transcription.js\n\t\n\tmodule.exports = (function() {\n\t  // Node\n\t  var Node = function() {\n\t    var _depth = 0\n\t      , _replaceString = null\n\t      , _childNodes = {}\n\t    function dump() {\n\t      var keys = Object.keys(_childNodes)\n\t      var res = {}\n\t      if (keys.length > 0) {\n\t        res = {\n\t          replaceString: _replaceString\n\t        , childNodes: keys.reduce(function(prev, key) {\n\t            prev[key] = _childNodes[key].dump()\n\t            return prev\n\t          }, {})\n\t        }\n\t      }\n\t      else {\n\t        res = {\n\t          replaceString: _replaceString\n\t        }\n\t      }\n\t      return res\n\t    }\n\t    function addEntry(src, depth, dest) {\n\t      _depth = depth\n\t      if (src.length === depth) {\n\t        _replaceString = dest\n\t      }\n\t      else {\n\t        if (!_childNodes[src[depth]]) {\n\t          _childNodes[src[depth]] = new Node()\n\t        }\n\t        _childNodes[src[depth]].addEntry(src, depth + 1, dest)\n\t      }\n\t    }\n\t    function getDepth() {\n\t      return _depth\n\t    }\n\t    function getReplaceString() {\n\t      return _replaceString\n\t    }\n\t    function searchNode(src, depth) {\n\t      if (src.length === depth) {\n\t        return this\n\t      }\n\t      if (_childNodes[src[depth]]) {\n\t        var terminal = _childNodes[src[depth]].searchNode(src, depth + 1)\n\t        if (terminal !== null) {\n\t          return terminal\n\t        }\n\t        else {\n\t          if (_replaceString !== null) {\n\t            return this\n\t          }\n\t        }\n\t      }\n\t      if (_replaceString === null) {\n\t        return null\n\t      }\n\t      else {\n\t        return this\n\t      }\n\t    }\n\t    return {\n\t      dump: dump\n\t    , addEntry: addEntry\n\t    , getDepth: getDepth\n\t    , getReplaceString: getReplaceString\n\t    , searchNode: searchNode\n\t    }\n\t  }\n\t\n\t  //\n\t  var _nodes = {}\n\t  function dump(from, to) {\n\t    return _nodes[from][to].dump()\n\t  }\n\t  function addToNode(from, to, fromChars, toChars) {\n\t    if (!_nodes[from]) {\n\t      _nodes[from] = {}\n\t    }\n\t    _nodes[from][to] = new Node()\n\t    Object.keys(fromChars).forEach(function(key) {\n\t      toChar = toChars[key] instanceof Array ? toChars[key][0] : toChars[key]\n\t      if(fromChars[key] instanceof Array) {\n\t        fromChars[key].forEach(function(fromChar) {\n\t          _nodes[from][to].addEntry(fromChar, 0, toChar)\n\t        })\n\t      }\n\t      else {\n\t        _nodes[from][to].addEntry(fromChars[key], 0, toChar)\n\t      }\n\t    })\n\t    return (function(src) {\n\t      return convert(from, to, src)\n\t    })\n\t  }\n\t  function convert(from, to, src) {\n\t    var dest = []\n\t      , node\n\t      , start\n\t    for (start = 0; start < src.length; ) {\n\t      node = _nodes[from][to].searchNode(src, start)\n\t      if (node === null) {\n\t        dest.push(src[start])\n\t        start++\n\t      }\n\t      else {\n\t        dest.push(node.getReplaceString())\n\t        start += node.getDepth()\n\t      }\n\t    }\n\t    return dest.join('')\n\t  }\n\t\n\t  // export\n\t  return {\n\t    dump: dump\n\t  , addToNode: addToNode\n\t  , convert: convert\n\t  }\n\t})()\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** encoding-lang-sa.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7d6ceebaa5faa154ac80\n **/","// encoding-lang-sa.js\n\nvar MT = require('multichar-transcription')\n\nmodule.exports = (function(options) {\n  var funcs = {}\n    , encs = {\n        'deva': {\n          'a': '\\u0900',\n          'ā': '\\u093E',\n          'i': '\\u093F',\n          'ī': '\\u0940',\n          'u': '\\u0941',\n          'ū': '\\u0942',\n          'ṛ': '\\u0943',\n          'ṝ': '\\u0944',\n          'ḷ': '\\u0962',\n          'ḹ': '\\u0963',\n          'e': '\\u0947',\n          'ai': '\\u0948',\n          'o': '\\u094B',\n          'au': '\\u094C',\n          'ṃ':  '\\u0902',\n          'ḥ': '\\u0903',\n          'k': 'क्',\n          'kh': 'ख्',\n          'g': 'ग्',\n          'gh': 'घ्',\n          'ṅ': 'ङ्',\n          'c': 'च्',\n          'ch': 'छ्',\n          'j': 'ज्',\n          'jh': 'झ्',\n          'ñ': 'ञ्',\n          'ṭ': 'ट्',\n          'ṭh': 'ठ्',\n          'ḍ': 'ड्',\n          'ḍh': 'ढ्',\n          'ṇ': 'ण्',\n          't': 'त्',\n          'th': 'थ्',\n          'd': 'द्',\n          'dh': 'ध्',\n          'n': 'न्',\n          'p': 'प्',\n          'ph': 'फ्',\n          'b': 'ब्',\n          'bh': 'भ्',\n          'm': 'म्',\n          'y': 'य्',\n          'r': 'र्',\n          'l': 'ल्',\n          'v': 'व्',\n          'ś': 'श्',\n          'ṣ': 'ष्',\n          's': 'स्',\n          'h': 'ह्',\n          '^a': 'अ',\n          '^ā': 'आ',\n          '^i': 'इ',\n          '^ī': 'ई',\n          '^u': 'उ',\n          '^ū': 'ऊ',\n          '^ṛ': 'ऋ',\n          '^ṝ': 'ॠ',\n          '^ḷ': 'ऌ',\n          '^ḹ': 'ॡ',\n          '^e': 'ए',\n          '^ai': 'ऐ',\n          '^o': 'ओ',\n          '^au': 'औ',\n          '_': '\\u094D',\n          \"'\": 'ऽ',\n          \"''\": \"'\",\n          '/': ' ।',\n          '//': ' ॥'\n        }\n      , 'iast': {\n          'a': 'a',\n          'ā': 'ā',\n          'i': 'i',\n          'ī': 'ī',\n          'u': 'u',\n          'ū': 'ū',\n          'ṛ': 'ṛ',\n          'ṝ': 'ṝ',\n          'ḷ': 'ḷ',\n          'ḹ': 'ḹ',\n          'e': 'e',\n          'ai': 'ai',\n          'o': 'o',\n          'au': 'au',\n          'ṃ': 'ṃ',\n          'ḥ': 'ḥ',\n          'k': 'k',\n          'kh': 'kh',\n          'g': 'g',\n          'gh': 'gh',\n          'ṅ': 'ṅ',\n          'c': 'c',\n          'ch': 'ch',\n          'j': 'j',\n          'jh': 'jh',\n          'ñ': 'ñ',\n          'ṭ': 'ṭ',\n          'ṭh': 'ṭh',\n          'ḍ': 'ḍ',\n          'ḍh': 'ḍh',\n          'ṇ': 'ṇ',\n          't': 't',\n          'th': 'th',\n          'd': 'd',\n          'dh': 'dh',\n          'n': 'n',\n          'p': 'p',\n          'ph': 'ph',\n          'b': 'b',\n          'bh': 'bh',\n          'm': 'm',\n          'y': 'y',\n          'r': 'r',\n          'l': 'l',\n          'v': 'v',\n          'ś': 'ś',\n          'ṣ': 'ṣ',\n          's': 's',\n          'h': 'h',\n          '^a': '^a',\n          '^ā': '^ā',\n          '^i': '^i',\n          '^ī': '^ī',\n          '^u': '^u',\n          '^ū': '^ū',\n          '^ṛ': '^ṛ',\n          '^ṝ': '^ṝ',\n          '^ḷ': '^ḷ',\n          '^ḹ': '^ḹ',\n          '^e': '^e',\n          '^ai': '^ai',\n          '^o': '^o',\n          '^au': '^au',\n          '_': '_',\n          \"'\": \"'\",\n          \"''\": \"''\",\n          '/': '/',\n          '//': '//'\n        }\n      , 'kami': {\n          'a': 'a',\n          'ā': 'aa',\n          'i': 'i',\n          'ī': 'ii',\n          'u': 'u',\n          'ū': 'uu',\n          'ṛ': '.r',\n          'ṝ': ':r',\n          'ḷ': '.l',\n          'ḹ': ':l',\n          'e': 'e',\n          'ai': 'ai',\n          'o': 'o',\n          'au': 'au',\n          'ṃ': '.m',\n          'ḥ': '.h',\n          'k': 'k',\n          'kh': 'kh',\n          'g': 'g',\n          'gh': 'gh',\n          'ṅ': '.g',\n          'c': 'c',\n          'ch': 'ch',\n          'j': 'j',\n          'jh': 'jh',\n          'ñ': '.j',\n          'ṭ': '.t',\n          'ṭh': '.th',\n          'ḍ': '.d',\n          'ḍh': '.dh',\n          'ṇ': '.n',\n          't': 't',\n          'th': 'th',\n          'd': 'd',\n          'dh': 'dh',\n          'n': 'n',\n          'p': 'p',\n          'ph': 'ph',\n          'b': 'b',\n          'bh': 'bh',\n          'm': 'm',\n          'y': 'y',\n          'r': 'r',\n          'l': 'l',\n          'v': 'v',\n          'ś': '.c',\n          'ṣ': '.s',\n          's': 's',\n          'h': 'h',\n          '^a': '^a',\n          '^ā': '^aa',\n          '^i': '^i',\n          '^ī': '^ii',\n          '^u': '^u',\n          '^ū': '^uu',\n          '^ṛ': '^.r',\n          '^ṝ': ['^:r', '^.r.r'],\n          '^ḷ': '^.l',\n          '^ḹ': ['^:l', '^.l.l'],\n          '^e': '^e',\n          '^ai': '^ai',\n          '^o': '^o',\n          '^au': '^au',\n          '_': '_',\n          \"'\": \"'\",\n          \"''\": \"''\",\n          '/': '/',\n          '//': '//'\n        }\n      , 'kh': {\n          'a': 'a',\n          'ā': 'A',\n          'i': 'i',\n          'ī': 'I',\n          'u': 'u',\n          'ū': 'U',\n          'ṛ': 'R',\n          'ṝ': ['RR', 'Q'],\n          'ḷ': 'L',\n          'ḹ': 'LL',\n          'e': 'e',\n          'ai': 'ai',\n          'o': 'o',\n          'au': 'au',\n          'ṃ': 'M',\n          'ḥ': 'H',\n          'k': 'k',\n          'kh': 'kh',\n          'g': 'g',\n          'gh': 'gh',\n          'ṅ': 'G',\n          'c': 'c',\n          'ch': 'ch',\n          'j': 'j',\n          'jh': 'jh',\n          'ñ': 'J',\n          'ṭ': 'T',\n          'ṭh': 'Th',\n          'ḍ': 'D',\n          'ḍh': 'Dh',\n          'ṇ': 'N',\n          't': 't',\n          'th': 'th',\n          'd': 'd',\n          'dh': 'dh',\n          'n': 'n',\n          'p': 'p',\n          'ph': 'ph',\n          'b': 'b',\n          'bh': 'bh',\n          'm': 'm',\n          'y': 'y',\n          'r': 'r',\n          'l': 'l',\n          'v': 'v',\n          'ś': ['z', 'Z'],\n          'ṣ': 'S',\n          's': 's',\n          'h': 'h',\n          '^a': '^a',\n          '^ā': '^A',\n          '^i': '^i',\n          '^ī': '^I',\n          '^u': '^u',\n          '^ū': '^U',\n          '^ṛ': '^R',\n          '^ṝ': ['^RR', '^Q'],\n          '^ḷ': '^L',\n          '^ḹ': '^LL',\n          '^e': '^e',\n          '^ai': '^ai',\n          '^o': '^o',\n          '^au': '^au',\n          '_': '_',\n          \"'\": \"'\",\n          \"''\": \"''\",\n          '/': '/',\n          '//': '//'\n        }\n      , '_sorter': {\n          'a': '\\u0901',\n          'ā': '\\u0903',\n          'i': '\\u0905',\n          'ī': '\\u0907',\n          'u': '\\u0909',\n          'ū': '\\u090B',\n          'ṛ': '\\u090D',\n          'ṝ': '\\u090F',\n          'ḷ': '\\u0911',\n          'ḹ': '\\u0913',\n          'e': '\\u0915',\n          'ai': '\\u0917',\n          'o': '\\u0919',\n          'au': '\\u091B',\n          'ṃ':  '\\u091D',\n          'ḥ': '\\u091E',\n          'k': '\\u0920',\n          'kh': '\\u0921',\n          'g': '\\u0922',\n          'gh': '\\u0923',\n          'ṅ': '\\u0924',\n          'c': '\\u0925',\n          'ch': '\\u0926',\n          'j': '\\u0927',\n          'jh': '\\u0928',\n          'ñ': '\\u0929',\n          'ṭ': '\\u092A',\n          'ṭh': '\\u092B',\n          'ḍ': '\\u092C',\n          'ḍh': '\\u092D',\n          'ṇ': '\\u092E',\n          't': '\\u092F',\n          'th': '\\u0930',\n          'd': '\\u0931',\n          'dh': '\\u0932',\n          'n': '\\u0933',\n          'p': '\\u0934',\n          'ph': '\\u0935',\n          'b': '\\u0936',\n          'bh': '\\u0937',\n          'm': '\\u0938',\n          'y': '\\u0939',\n          'r': '\\u093A',\n          'l': '\\u093B',\n          'v': '\\u093C',\n          'ś': '\\u093D',\n          'ṣ': '\\u093E',\n          's': '\\u093F',\n          'h': '\\u0940',\n          '^a': '\\u0902',\n          '^ā': '\\u0904',\n          '^i': '\\u0906',\n          '^ī': '\\u0908',\n          '^u': '\\u090A',\n          '^ū': '\\u090C',\n          '^ṛ': '\\u090E',\n          '^ṝ': '\\u0910',\n          '^ḷ': '\\u0912',\n          '^ḹ': '\\u0914',\n          '^e': '\\u0916',\n          '^ai': '\\u0918',\n          '^o': '\\u091A',\n          '^au': '\\u091C',\n          '_': '\\u0900'\n        }\n      }\n\n  function converter(from, to, option) {\n    if (!encs[from] || !encs[to]) {\n      throw new Error('EncodingLangSa: supported encodings is: '\n        + Object.keys(encs).join(', '))\n    }\n    if (!funcs[from + '-' + to]) {\n      funcs[from + '-' + to] = MT.addToNode(from, to, encs[from], encs[to])\n    }\n    return function(src) {\n      var res = src\n      if (from === 'deva') {\n        res = res.replace(/([\\u0915-\\u0939])/g, '$1\\u094D\\u0900')\n        .replace(/\\u0900([\\u094D\\u093E-\\u094C\\u0962\\u0963])/g, '$1')\n      }\n      res = funcs[from + '-' + to](res)\n      if (from === 'deva') {\n        res = res.replace(/_/g, '')\n      }\n      if (to === 'deva') {\n        if (option && option.removeSpace) {\n          res = res.replace(/\\u094D /g, '\\u094D')\n        }\n        res = res\n        .replace(/\\u094D\\u0900/g, '')\n        .replace(/\\u094D([\\u093E-\\u094C\\u0962\\u0963])/g, '$1')\n        .replace(/\\u0900/g, '')\n      }\n      return res\n    }\n  }\n\n  function sorter(from, option) {\n    var conv = converter(from, '_sorter', option)\n    return function(a, b) {\n      a = conv(a)\n      b = conv(b)\n      return a < b ? -1 : a > b ? 1 : 0\n    }\n  }\n\n  // export\n  return {\n    converter: converter\n  , sorter: sorter\n  }\n})()\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","// multichar-transcription.js\n\nmodule.exports = (function() {\n  // Node\n  var Node = function() {\n    var _depth = 0\n      , _replaceString = null\n      , _childNodes = {}\n    function dump() {\n      var keys = Object.keys(_childNodes)\n      var res = {}\n      if (keys.length > 0) {\n        res = {\n          replaceString: _replaceString\n        , childNodes: keys.reduce(function(prev, key) {\n            prev[key] = _childNodes[key].dump()\n            return prev\n          }, {})\n        }\n      }\n      else {\n        res = {\n          replaceString: _replaceString\n        }\n      }\n      return res\n    }\n    function addEntry(src, depth, dest) {\n      _depth = depth\n      if (src.length === depth) {\n        _replaceString = dest\n      }\n      else {\n        if (!_childNodes[src[depth]]) {\n          _childNodes[src[depth]] = new Node()\n        }\n        _childNodes[src[depth]].addEntry(src, depth + 1, dest)\n      }\n    }\n    function getDepth() {\n      return _depth\n    }\n    function getReplaceString() {\n      return _replaceString\n    }\n    function searchNode(src, depth) {\n      if (src.length === depth) {\n        return this\n      }\n      if (_childNodes[src[depth]]) {\n        var terminal = _childNodes[src[depth]].searchNode(src, depth + 1)\n        if (terminal !== null) {\n          return terminal\n        }\n        else {\n          if (_replaceString !== null) {\n            return this\n          }\n        }\n      }\n      if (_replaceString === null) {\n        return null\n      }\n      else {\n        return this\n      }\n    }\n    return {\n      dump: dump\n    , addEntry: addEntry\n    , getDepth: getDepth\n    , getReplaceString: getReplaceString\n    , searchNode: searchNode\n    }\n  }\n\n  //\n  var _nodes = {}\n  function dump(from, to) {\n    return _nodes[from][to].dump()\n  }\n  function addToNode(from, to, fromChars, toChars) {\n    if (!_nodes[from]) {\n      _nodes[from] = {}\n    }\n    _nodes[from][to] = new Node()\n    Object.keys(fromChars).forEach(function(key) {\n      toChar = toChars[key] instanceof Array ? toChars[key][0] : toChars[key]\n      if(fromChars[key] instanceof Array) {\n        fromChars[key].forEach(function(fromChar) {\n          _nodes[from][to].addEntry(fromChar, 0, toChar)\n        })\n      }\n      else {\n        _nodes[from][to].addEntry(fromChars[key], 0, toChar)\n      }\n    })\n    return (function(src) {\n      return convert(from, to, src)\n    })\n  }\n  function convert(from, to, src) {\n    var dest = []\n      , node\n      , start\n    for (start = 0; start < src.length; ) {\n      node = _nodes[from][to].searchNode(src, start)\n      if (node === null) {\n        dest.push(src[start])\n        start++\n      }\n      else {\n        dest.push(node.getReplaceString())\n        start += node.getDepth()\n      }\n    }\n    return dest.join('')\n  }\n\n  // export\n  return {\n    dump: dump\n  , addToNode: addToNode\n  , convert: convert\n  }\n})()\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/multichar-transcription/index.js\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}